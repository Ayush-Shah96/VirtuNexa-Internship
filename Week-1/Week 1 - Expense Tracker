/*Goal: Develop a Java application with features like account creation, balance checking, deposits, withdrawals, and transaction history.

Structure:
     -User Interface: Design a console-based or GUI interface using Java frameworks (e.g., Swing, JavaFX, or simple CLI for basic functionality).
     -Expense Management: Implement features for adding, editing, and deleting expenses, and categorizing them.
     -Reports: Generate expense reports, showing detailed breakdowns and summaries of expenses over time.


Technologies:
     -Java: For developing the application’s core logic and features.
     -JDBC/SQLite: For database interaction (to store and retrieve expense data).
     -Swing/JavaFX (Optional): For building a GUI for better user interaction (if not a console application).

Optional:
     -JDBC/SQLite/JavaDB: For persistent data storage of expenses in a local database.
     -Apache POI: For generating expense reports in Excel format.
     -JSON/XML: For exporting or importing expense data (optional).

Deliverables:
     -Complete Java project files (including source code and necessary configuration files).
     -JAR file for running the application.
     -Documentation of the application’s functionality, usage, and setup.

Checklist:
     -Design the system for expense tracking with relevant fields (amount, category, date, etc.).
     -Implement functionality to add, edit, view, and delete expenses.
     -Implement a report generation system that displays detailed reports of expenses.
     -Integrate database storage (e.g., SQLite, MySQL) to persist the expense data.
     -Test the application in different environments (e.g., different Java versions, OS).
     -Submit the complete project files and documentation.
*/



import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.ArrayList;

public class ExpenseTracker {
    private Connection connection;
    private JFrame frame;
    private JTextField amountField, categoryField, dateField;
    private JTextArea transactionHistoryArea;

    public ExpenseTracker() {
        connectToDatabase();
        createUI();
    }

    private void connectToDatabase() {
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:expenses.db");
            Statement stmt = connection.createStatement();
            stmt.execute("CREATE TABLE IF NOT EXISTS expenses (id INTEGER PRIMARY KEY, amount REAL, category TEXT, date TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void createUI() {
        frame = new JFrame("Expense Tracker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLayout(new FlowLayout());

        amountField = new JTextField(10);
        categoryField = new JTextField(10);
        dateField = new JTextField(10);
        transactionHistoryArea = new JTextArea(10, 30);
        transactionHistoryArea.setEditable(false);

        JButton addButton = new JButton("Add Expense");
        JButton viewButton = new JButton("View Expenses");
        JButton deleteButton = new JButton("Delete Expense");

        addButton.addActionListener(e -> addExpense());
        viewButton.addActionListener(e -> viewExpenses());
        deleteButton.addActionListener(e -> deleteExpense());

        frame.add(new JLabel("Amount:"));
        frame.add(amountField);
        frame.add(new JLabel("Category:"));
        frame.add(categoryField);
        frame.add(new JLabel("Date:"));
        frame.add(dateField);
        frame.add(addButton);
        frame.add(viewButton);
        frame.add(deleteButton);
        frame.add(new JScrollPane(transactionHistoryArea));

        frame.setVisible(true);
    }

    private void addExpense() {
        try {
            String sql = "INSERT INTO expenses (amount, category, date) VALUES (?, ?, ?)";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setDouble(1, Double.parseDouble(amountField.getText()));
            pstmt.setString(2, categoryField.getText());
            pstmt.setString(3, dateField.getText());
            pstmt.executeUpdate();
            amountField.setText("");
            categoryField.setText("");
            dateField.setText("");
            JOptionPane.showMessageDialog(frame, "Expense added!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void viewExpenses() {
        try {
            String sql = "SELECT * FROM expenses";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            StringBuilder history = new StringBuilder();
            while (rs.next()) {
                history.append("ID: ").append(rs.getInt("id"))
                      .append(", Amount: ").append(rs.getDouble("amount"))
                      .append(", Category: ").append(rs.getString("category"))
                      .append(", Date: ").append(rs.getString("date")).append("\n");
            }
            transactionHistoryArea.setText(history.toString());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void deleteExpense() {
        String id = JOptionPane.showInputDialog(frame, "Enter Expense ID to delete:");
        try {
            String sql = "DELETE FROM expenses WHERE id = ?";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(id));
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(frame, "Expense deleted!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ExpenseTracker::new);
    }
}
