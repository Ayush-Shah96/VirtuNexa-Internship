import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class PasswordGeneratorGUI extends JFrame {

    private JTextField lengthField;
    private JCheckBox uppercaseCheckBox;
    private JCheckBox lowercaseCheckBox;
    private JCheckBox numberCheckBox;
    private JCheckBox specialCharCheckBox;
    private JTextArea passwordArea;

    public PasswordGeneratorGUI() {
        setTitle("Password Generator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLayout(new BorderLayout());

        JPanel optionsPanel = new JPanel(new GridLayout(5, 2));
        optionsPanel.add(new JLabel("Password Length:"));
        lengthField = new JTextField(5);
        optionsPanel.add(lengthField);
        uppercaseCheckBox = new JCheckBox("Include Uppercase");
        optionsPanel.add(uppercaseCheckBox);
        lowercaseCheckBox = new JCheckBox("Include Lowercase");
        optionsPanel.add(lowercaseCheckBox);
        numberCheckBox = new JCheckBox("Include Numbers");
        optionsPanel.add(numberCheckBox);
        specialCharCheckBox = new JCheckBox("Include Special Characters");
        optionsPanel.add(specialCharCheckBox);

        JButton generateButton = new JButton("Generate Password");
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generatePassword();
            }
        });

        passwordArea = new JTextArea(5, 20);
        passwordArea.setEditable(false);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.add(optionsPanel, BorderLayout.NORTH);
        mainPanel.add(generateButton, BorderLayout.CENTER);
        mainPanel.add(new JScrollPane(passwordArea), BorderLayout.SOUTH);

        add(mainPanel);
        setVisible(true);
    }

    private void generatePassword() {
        String password = "";
        int length;
        try {
            length = Integer.parseInt(lengthField.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid length. Please enter a number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (length <= 0) {
            JOptionPane.showMessageDialog(this, "Password length must be greater than 0.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String charset = "";
        if (lowercaseCheckBox.isSelected()) {
            charset += "abcdefghijklmnopqrstuvwxyz";
        }
        if (uppercaseCheckBox.isSelected()) {
            charset += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        }
        if (numberCheckBox.isSelected()) {
            charset += "0123456789";
        }
        if (specialCharCheckBox.isSelected()) {
            charset += "!@#$%^&*()_+-={};':\",.<>/?";
        }

        if (charset.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select at least one character type.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Random random = new Random();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(charset.length());
            password += charset.charAt(index);
        }

        passwordArea.setText(password);
    }

    public static void main(String args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PasswordGeneratorGUI();
            }
        });
    }
}
